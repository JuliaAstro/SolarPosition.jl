var documenterSearchIndex = {"docs":
[{"location":"examples/plotting/#plotting-examples","page":"Using the Makie.jl plotting extension","title":"Using the Makie.jl plotting extension","text":"","category":"section"},{"location":"examples/plotting/","page":"Using the Makie.jl plotting extension","title":"Using the Makie.jl plotting extension","text":"SolarPosition.jl provides a plotting extension based on Makie.jl.","category":"page"},{"location":"examples/plotting/","page":"Using the Makie.jl plotting extension","title":"Using the Makie.jl plotting extension","text":"To use it, simply import both the SolarPosition and Makie packages:","category":"page"},{"location":"examples/plotting/","page":"Using the Makie.jl plotting extension","title":"Using the Makie.jl plotting extension","text":"using SolarPosition\nusing CairoMakie\nusing Dates\nusing TimeZones\nusing DataFrames","category":"page"},{"location":"examples/plotting/#Basic-Sun-Path-Plotting","page":"Using the Makie.jl plotting extension","title":"Basic Sun Path Plotting","text":"","category":"section"},{"location":"examples/plotting/","page":"Using the Makie.jl plotting extension","title":"Using the Makie.jl plotting extension","text":"Let's start by defining an observer location and calculating solar positions for a whole year:","category":"page"},{"location":"examples/plotting/","page":"Using the Makie.jl plotting extension","title":"Using the Makie.jl plotting extension","text":"# Define observer location (New Delhi, India)\n# Parameters: latitude, longitude, altitude in meters\ntz = tz\"Asia/Kolkata\"\nobs = Observer(28.6, 77.2, 0.0)\n\n# Generate hourly timestamps for a whole year\ntimes = ZonedDateTime(DateTime(2019), tz):Hour(1):ZonedDateTime(DateTime(2020), tz)\npositions = solar_position(obs, times)","category":"page"},{"location":"examples/plotting/#Simple-Sun-Path-Plot","page":"Using the Makie.jl plotting extension","title":"Simple Sun Path Plot","text":"","category":"section"},{"location":"examples/plotting/","page":"Using the Makie.jl plotting extension","title":"Using the Makie.jl plotting extension","text":"The simplest way to visualize solar positions is using the sunpathplot function:","category":"page"},{"location":"examples/plotting/","page":"Using the Makie.jl plotting extension","title":"Using the Makie.jl plotting extension","text":"# Plot positions in Cartesian coordinates\nsunpathplot(positions)","category":"page"},{"location":"examples/plotting/#Polar-Coordinates-with-Hour-Labels","page":"Using the Makie.jl plotting extension","title":"Polar Coordinates with Hour Labels","text":"","category":"section"},{"location":"examples/plotting/","page":"Using the Makie.jl plotting extension","title":"Using the Makie.jl plotting extension","text":"For a more detailed visualization, you can use polar coordinates with hourly labels:","category":"page"},{"location":"examples/plotting/","page":"Using the Makie.jl plotting extension","title":"Using the Makie.jl plotting extension","text":"# Convert to DataFrame for more plotting options\ndf = DataFrame(positions)\n\n# Plot in polar coordinates with hourly labels and colorbar\nsunpathpolarplot(df, hour_labels = true, colorbar = true)","category":"page"},{"location":"examples/plotting/#Advanced-Plotting-Examples","page":"Using the Makie.jl plotting extension","title":"Advanced Plotting Examples","text":"","category":"section"},{"location":"examples/plotting/#Custom-Polar-Plot-with-Manual-Axis-Setup","page":"Using the Makie.jl plotting extension","title":"Custom Polar Plot with Manual Axis Setup","text":"","category":"section"},{"location":"examples/plotting/","page":"Using the Makie.jl plotting extension","title":"Using the Makie.jl plotting extension","text":"You can create more customized plots by manually setting up the axes:","category":"page"},{"location":"examples/plotting/","page":"Using the Makie.jl plotting extension","title":"Using the Makie.jl plotting extension","text":"# Create a custom polar plot with manual axis configuration\nfig = Figure(size = (600, 600))\nax = PolarAxis(fig[1, 1], title = \"Solar Path - Polar Coordinates with Hour Labels\")\nsunpathpolarplot!(ax, df, hour_labels = true, colorbar = false)\nfig","category":"page"},{"location":"examples/plotting/#Cartesian-Plot-without-Hour-Labels","page":"Using the Makie.jl plotting extension","title":"Cartesian Plot without Hour Labels","text":"","category":"section"},{"location":"examples/plotting/","page":"Using the Makie.jl plotting extension","title":"Using the Makie.jl plotting extension","text":"For comparison, here's a cleaner plot without hourly labels:","category":"page"},{"location":"examples/plotting/","page":"Using the Makie.jl plotting extension","title":"Using the Makie.jl plotting extension","text":"# Example without hourly labels for a cleaner appearance\nfig2 = Figure(size = (800, 600))\nax2 = Axis(fig2[1, 1],\n    title = \"Solar Path - Cartesian Coordinates\",\n    xlabel = \"Azimuth (degrees)\",\n    ylabel = \"Elevation (degrees)\"\n)\nsunpathplot!(ax2, df; hour_labels = false, colorbar = true)\nfig2","category":"page"},{"location":"examples/plotting/#Plot-Customization-Options","page":"Using the Makie.jl plotting extension","title":"Plot Customization Options","text":"","category":"section"},{"location":"examples/plotting/","page":"Using the Makie.jl plotting extension","title":"Using the Makie.jl plotting extension","text":"The plotting functions support various customization options:","category":"page"},{"location":"examples/plotting/","page":"Using the Makie.jl plotting extension","title":"Using the Makie.jl plotting extension","text":"hour_labels: Boolean to show/hide hourly time labels\ncolorbar: Boolean to show/hide the colorbar indicating time of year\nCustom figure sizes and axis titles as shown in the examples above","category":"page"},{"location":"examples/plotting/","page":"Using the Makie.jl plotting extension","title":"Using the Makie.jl plotting extension","text":"These plotting capabilities make it easy to visualize and analyze solar paths for any location and time period.","category":"page"},{"location":"contributing/#contributing","page":"Contributing guidelines","title":"Contributing guidelines","text":"","category":"section"},{"location":"contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"First of all, thanks for the interest!","category":"page"},{"location":"contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"We welcome all kinds of contribution, including, but not limited to code, documentation, examples, configuration, issue creating, etc.","category":"page"},{"location":"contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"Be polite and respectful.","category":"page"},{"location":"contributing/#Bug-reports-and-discussions","page":"Contributing guidelines","title":"Bug reports and discussions","text":"","category":"section"},{"location":"contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"If you think you found a bug, feel free to open an issue. Focused suggestions and requests can also be opened as issues. Before opening a pull request, start an issue or a discussion on the topic, please.","category":"page"},{"location":"contributing/#Working-on-an-issue","page":"Contributing guidelines","title":"Working on an issue","text":"","category":"section"},{"location":"contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"If you found an issue that interests you, comment on that issue what your plans are. If the solution to the issue is clear, you can immediately create a pull request (see below). Otherwise, say what your proposed solution is and wait for a discussion around it.","category":"page"},{"location":"contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"tip: Tip\n","category":"page"},{"location":"contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"Feel free to ping us after a few days if there are no responses.","category":"page"},{"location":"reference/#reference","page":"API reference","title":"API reference","text":"","category":"section"},{"location":"reference/#Contents","page":"API reference","title":"Contents","text":"","category":"section"},{"location":"reference/","page":"API reference","title":"API reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/#Index","page":"API reference","title":"Index","text":"","category":"section"},{"location":"reference/","page":"API reference","title":"API reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/#SolarPosition.Positioning","page":"API reference","title":"SolarPosition.Positioning","text":"Collection of solar positioning algorithms.\n\n\n\n\n\n","category":"module"},{"location":"reference/#SolarPosition.Positioning.Observer","page":"API reference","title":"SolarPosition.Positioning.Observer","text":"Observer{T}\n\nObserver location (degrees, meters). Use Float64 for speed unless you need higher precision.\n\n\n\n\n\n","category":"type"},{"location":"reference/#SolarPosition.Positioning.SolarPos","page":"API reference","title":"SolarPosition.Positioning.SolarPos","text":"SolarPos{T}\n\nDescribes a single solar position.\n\n\n\n\n\n","category":"type"},{"location":"reference/#SolarPosition.Positioning._solar_position-Union{Tuple{T}, Tuple{Observer{T}, Dates.DateTime, PSA}} where T","page":"API reference","title":"SolarPosition.Positioning._solar_position","text":"_solar_position(\n    obs::Observer{T},\n    dt::DateTime,\n    ::PSA,\n) -> SolarPos{T}\n\nPSA algorithm implementation stub.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolarPosition.Positioning._solar_position-Union{Tuple{T}, Tuple{Observer{T}, TimeZones.ZonedDateTime, SolarPosition.Positioning.NOAA}} where T","page":"API reference","title":"SolarPosition.Positioning._solar_position","text":"_solar_position(\n    obs::Observer{T},\n    dt::ZonedDateTime,\n    ::NOAA,\n) -> SolarPos{T}\n\nNOAA algorithm implementation stub.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolarPosition.Positioning.solar_position","page":"API reference","title":"SolarPosition.Positioning.solar_position","text":"solar_position(obs::Observer, dt::DateTime; alg::SolarAlgorithm=PSA(), kwargs...) -> SolarPos\nsolar_position(obs::Observer, dt::ZonedDateTime; alg::SolarAlgorithm=PSA(), kwargs...) -> SolarPos\nsolar_position(latitude::T, longitude::T, altitude::T, dt::DateTime;\n               alg::SolarAlgorithm=PSA(), kwargs...) -> SolarPos where {T<:AbstractFloat}\nsolar_position(latitude::T, longitude::T, altitude::T, dt::ZonedDateTime;\n               alg::SolarAlgorithm=PSA(), kwargs...) -> SolarPos where {T<:AbstractFloat}\nsolar_position(latitude::AbstractFloat, longitude::AbstractFloat, dt::DateTime;\n               alg::SolarAlgorithm=PSA(), kwargs...) -> SolarPos\nsolar_position(latitude::AbstractFloat, longitude::AbstractFloat, dt::ZonedDateTime;\n               alg::SolarAlgorithm=PSA(), kwargs...) -> SolarPos\nsolar_position(dt::DateTime; latitude::AbstractFloat, longitude::AbstractFloat,\n               altitude::AbstractFloat=0.0, alg::SolarAlgorithm=PSA(), kwargs...) -> SolarPos\nsolar_position(dt::ZonedDateTime; latitude::AbstractFloat, longitude::AbstractFloat,\n               altitude::AbstractFloat=0.0, alg::SolarAlgorithm=PSA(), kwargs...) -> SolarPos\nsolar_position(obs::Observer, dts::AbstractVector{DateTime};\n               alg::SolarAlgorithm=PSA(), kwargs...) -> NamedTuple\nsolar_position(obs::Observer, dts::AbstractVector{ZonedDateTime};\n               alg::SolarAlgorithm=PSA(), kwargs...) -> NamedTuple\nsolar_position(obs::Observer, dts::AbstractRange{DateTime};\n               alg::SolarAlgorithm=PSA(), kwargs...) -> NamedTuple\nsolar_position(obs::Observer, dts::AbstractRange{ZonedDateTime};\n               alg::SolarAlgorithm=PSA(), kwargs...) -> NamedTuple\nsolar_position(dts::AbstractVector{DateTime}; latitude::AbstractFloat, longitude::AbstractFloat,\n               altitude::AbstractFloat=0.0, alg::SolarAlgorithm=PSA(), kwargs...) -> NamedTuple\nsolar_position(dts::AbstractVector{ZonedDateTime}; latitude::AbstractFloat, longitude::AbstractFloat,\n               altitude::AbstractFloat=0.0, alg::SolarAlgorithm=PSA(), kwargs...) -> NamedTuple\nsolar_position(dts::AbstractRange{DateTime}; latitude::AbstractFloat, longitude::AbstractFloat,\n               altitude::AbstractFloat=0.0, alg::SolarAlgorithm=PSA(), kwargs...) -> NamedTuple\nsolar_position(dts::AbstractRange{ZonedDateTime}; latitude::AbstractFloat, longitude::AbstractFloat,\n               altitude::AbstractFloat=0.0, alg::SolarAlgorithm=PSA(), kwargs...) -> NamedTuple\n\nCompute the apparent solar position for a given observer at time dt or vector of times dts.\n\nArguments\n\nobs::Observer : Observer location (latitude, longitude, altitude).\nlatitude, longitude, altitude : Specify observer location directly.\ndt::DateTime or ZonedDateTime : Time at which to compute solar position.\ndts::AbstractVector{DateTime} or AbstractVector{ZonedDateTime} : Vector of times for batch computation.\nalg::SolarAlgorithm : Algorithm to use (default: PSA()).\nkwargs... : Additional keyword arguments forwarded to the algorithm.\n\nReturns\n\nSolarPos : Struct containing solar zenith, azimuth, elevation (for single time).\nNamedTuple : Named tuple with datetime, azimuth, elevation, zenith vectors (for multiple times).\n\nNotes\n\nAll angles are in radians.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SolarPosition.Positioning.solar_position!-Tuple{Any, Observer}","page":"API reference","title":"SolarPosition.Positioning.solar_position!","text":"solar_position!(table, obs::Observer; dt_col::Symbol=:datetime, alg::SolarAlgorithm=PSA(), kwargs...)\nsolar_position!(table; latitude::AbstractFloat, longitude::AbstractFloat,\n                altitude::AbstractFloat=0.0, alg::SolarAlgorithm=PSA(), kwargs...)\n\nCompute solar positions for all times in a table and add the results as new columns.\n\nArguments\n\ntable : Table-like object with datetime column (must support Tables.jl interface).\nobs::Observer : Observer location (latitude, longitude, altitude).\nlatitude, longitude, altitude : Specify observer location directly.\ndt_col::Symbol : Name of the datetime column (default: :datetime).\nalg::SolarAlgorithm : Algorithm to use (default: PSA()).\nkwargs... : Additional keyword arguments forwarded to the algorithm.\n\nReturns\n\nModified table with added columns: azimuth, elevation, zenith.\n\nNotes\n\nAll angles are in radians. The input table is modified in-place by adding new columns.\n\n\n\n\n\n","category":"method"},{"location":"#SolarPosition.jl","page":"SolarPosition.jl","title":"SolarPosition.jl","text":"","category":"section"},{"location":"","page":"SolarPosition.jl","title":"SolarPosition.jl","text":"SolarPosition.jl provides a simple, unified interface to a collection of solar position algorithms written in pure, performant julia. The position of the sun in the sky is based on date, time, and a given observer location.","category":"page"},{"location":"","page":"SolarPosition.jl","title":"SolarPosition.jl","text":"A solar position algorithm is commonly used to calculate the solar zenith and azimuth angles, which are essential for various applications such as solar energy systems, building design, and climate studies.","category":"page"},{"location":"#Solar-positioning-algorithms","page":"SolarPosition.jl","title":"Solar positioning algorithms","text":"","category":"section"},{"location":"","page":"SolarPosition.jl","title":"SolarPosition.jl","text":"Here we provide an overview of the solar positioning algorithms currently implemented in SolarPosition.jl. Each algorithm is described with its reference paper, claimed accuracy and implementation status.","category":"page"},{"location":"","page":"SolarPosition.jl","title":"SolarPosition.jl","text":"Algorithm Reference Accuracy Status\nPSA Blanco-Muriel et al. ±0.0083° ✅\nNOAA Global Monitoring Laboratory ±0.0167° ❌","category":"page"},{"location":"examples/basic/#basic-examples","page":"Basic Examples","title":"Basic Examples","text":"","category":"section"},{"location":"examples/basic/","page":"Basic Examples","title":"Basic Examples","text":"This section demonstrates basic usage of SolarPosition.jl for calculating solar positions.","category":"page"},{"location":"examples/basic/","page":"Basic Examples","title":"Basic Examples","text":"using SolarPosition\nusing Dates\nusing TimeZones\n\n# Define observer location (latitude, longitude, altitude in meters)\nobs = Observer(37.7749, -122.4194, 100.0)  # San Francisco\n\n# Calculate solar position for a specific time\ndt = ZonedDateTime(2023, 6, 21, 12, 0, 0, tz\"America/Los_Angeles\")  # Summer solstice noon\nposition = solar_position(obs, dt)\n\nprintln(\"Solar position at summer solstice noon in San Francisco:\")\nprintln(\"Azimuth: $(round(position.azimuth, digits=2))°\")\nprintln(\"Elevation: $(round(position.elevation, digits=2))°\")","category":"page"}]
}
