"""Unit tests for PSA.jl"""

function expected_2020()
    columns = [:elevation, :zenith, :azimuth]

    values = [
        [32.21595946, 57.78404054, 204.9167547],
        [32.20349382, 57.79650618, 204.96304003],
        [34.92071906, 55.07928094, 169.37535422],
        [18.63439275, 71.36560725, 234.1884117],
        [35.7535716, 54.2464284, 197.67796274],
        [-9.5321134, 99.5321134, 201.18736969],
        [66.85741664, 23.14258336, 245.08558596],
        [9.52730057, 80.47269943, 338.81263031],
        [50.10853074, 39.89146926, 326.23536385],
        [35.35979872, 54.64020128, 175.38781378],
        [-53.24299848, 143.24299848, 18.64664538],
        [-53.24299848, 143.24299848, 18.64664538],
        [32.47215358, 57.52784642, 204.9305477],
        [32.43510874, 57.56489126, 204.98638231],
        [-23.41028925, 113.41028925, 79.54884709],
        [1.10556787, 88.89443213, 104.54003062],
        [32.21595946, 57.78404054, 204.9167547],
        [32.21595946, 57.78404054, 204.9167547],
        [32.21595946, 57.78404054, 204.9167547],
    ]

    return DataFrame(reduce(hcat, values)', columns)
end

function expected_2001()
    columns = [:elevation, :zenith, :azimuth]

    values = [
        [32.21434385, 57.78565615, 204.91957868],
        [32.20187689, 57.79812311, 204.96586258],
        [34.92027644, 55.07972356, 169.3788305],
        [18.63211707, 71.36788293, 234.19028111],
        [35.75446859, 54.24553141, 197.67713395],
        [-9.53293173, 99.53293173, 201.19017401],
        [66.85455175, 23.14544825, 245.08643499],
        [9.52811892, 80.47188108, 338.80982599],
        [50.10817913, 39.89182087, 326.23090017],
        [35.35914111, 54.64085889, 175.39125721],
        [-53.24316093, 143.24316093, 18.65145716],
        [-53.24316093, 143.24316093, 18.65145716],
        [32.46428802, 57.53571198, 204.93415982],
        [32.43981197, 57.56018803, 204.98955089],
        [-23.40890746, 113.40890746, 79.55160745],
        [1.10690714, 88.89309286, 104.54258663],
        [32.21434385, 57.78565615, 204.91957868],
        [32.21434385, 57.78565615, 204.91957868],
        [32.21434385, 57.78565615, 204.91957868],
    ]

    return DataFrame(reduce(hcat, values)', columns)
end

@testset "PSA" begin
    coeffs = Dict(2020 => expected_2020, 2001 => expected_2001)

    @testset "Coeff $i" for (i, expected) in coeffs
        df_expected = expected()
        conds = test_conditions()
        @test size(df_expected, 1) == 19
        @test size(df_expected, 2) == 3
        @test size(conds, 1) == 19
        @test size(conds, 2) == 4

        # conds = time, latitude, longitude, altitude
        # for (dt, lat, lon, alt) in eachrow(conds)
        for ((dt, lat, lon, alt), (exp_elev, exp_zen, exp_az)) in
            zip(eachrow(conds), eachrow(df_expected))
            if ismissing(alt)
                obs = Observer(lat, lon)
            else
                obs = Observer(lat, lon, altitude = alt)
            end

            res = solar_position(obs, dt, PSA(i))
            @test isapprox(res.elevation, exp_elev, atol = 1e-6)
            @test isapprox(res.zenith, exp_zen, atol = 1e-6)
            @test isapprox(res.azimuth, exp_az, atol = 1e-6)
        end
    end
end
